name: Deploy docker hub

on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '>=18.19 <=18.21'
      #     cache: 'yarn'

      # - name: Install specific Yarn version
      #   run: |
      #     corepack enable
      #     corepack prepare yarn@1.22.22 --activate

      # - name: Install dependencies
      #   run: yarn install --frozen-lockfile
      # - name: Run lint
      #   run: yarn lint

      # - name: Run lint:css
      #   run: yarn lint:css

      # - name: Run test
      #   run: yarn test
      # - name: Build Storybook
      #   run: yarn build-storybook

      # - name: Deploy to GitHub Pages
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./storybook-static
      #     user_name: 'github-actions[bot]'
      #     user_email: 'github-actions[bot]@users.noreply.github.com'
      # - name: clean storybook folder
      #   run: rm -rf ./storybook-static
      # - name: Login in DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Setup envirronments variables
      #   run: | 
      #     echo "DOCKER_HUB_REPO=openscience" >> $GITHUB_ENV
      #     echo "DOCKER_USER_NAME=ditmar" >> $GITHUB_ENV
      # - name: Get shour commit hash
      #   id: vars
      #   run: echo "GIT_COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      # - name: build project
      #   run: yarn build
      # - name: Build Docker image
      #   run: docker build --build-arg WEB_APP=${{ env.GIT_COMMIT_HASH }} -t ditmar/${{ env.DOCKER_HUB_REPO }}:${{ env.GIT_COMMIT_HASH }} .
      # - name: Push Docker image to Docker Hub
      #   run: |
      #     docker tag ditmar/${{ env.DOCKER_HUB_REPO }}:${{ env.GIT_COMMIT_HASH }} ditmar/${{ env.DOCKER_HUB_REPO }}:${{ env.GIT_COMMIT_HASH }}
      #     docker push ditmar/${{ env.DOCKER_HUB_REPO }}:${{ env.GIT_COMMIT_HASH }}

      - name: Trigger CD Workflow via Repository Dispatch
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "SSH connection successful"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Debug Inputs
        run: |
          echo "github.event.inputs: ${{ toJson(github.event.inputs) }}"
      - name: Set environment variables
        run: |
          echo "STRAPI_APP=a443bfc" >> $GITHUB_ENV
          echo "WEB_APP=cf01c4e" >> $GITHUB_ENV
          echo "ENV=${{ github.event.inputs.ENV }}" >> $GITHUB_ENV
          if [ "${{ github.event.inputs.ENV }}" = "PROD" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "DEPLOY_FILE=deployment/production/deploy.yml" >> $GITHUB_ENV
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME_PROD }}" >> $GITHUB_ENV
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME_PROD }}" >> $GITHUB_ENV
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD_PROD }}" >> $GITHUB_ENV
          else
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "DEPLOY_FILE=deployment/development/deploy.yml" >> $GITHUB_ENV
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME_DEV }}" >> $GITHUB_ENV
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD_DEV }}" >> $GITHUB_ENV
          fi

      - name: Verify environment variables
        run: |
          echo "STRAPI_APP=${{ env.STRAPI_APP }}"
          echo "WEB_APP=${{ env.WEB_APP }}"
          echo "ENV=${{ env.ENV }}"
          echo "NODE_ENV=${{ env.NODE_ENV }}"
          echo "DEPLOY_FILE=${{ env.DEPLOY_FILE }}"
          echo "DATABASE_NAME=${{ env.DATABASE_NAME }}"
          echo "DATABASE_USERNAME=${{ env.DATABASE_USERNAME }}"
          echo "DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}"

      - name: Copy Docker Compose file to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          source: ${{ env.DEPLOY_FILE }}
          target: "/home/${{ secrets.AWS_SSH_USER }}/deploy"
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: 22

      - name: Deploy with Docker Compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/${{ secrets.AWS_SSH_USER }}/deploy/deployment/${{ env.NODE_ENV }}/
            export STRAPI_APP=${{ env.STRAPI_APP }}
            export WEB_APP=${{ env.WEB_APP }}
            export NODE_ENV=${{ env.NODE_ENV }}
            export DATABASE_NAME=${{ env.DATABASE_NAME }}
            export DATABASE_USERNAME=${{ env.DATABASE_USERNAME }}
            export DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
            docker-compose -f deploy.yml down
            docker-compose -f deploy.yml up -d

      - name: Clean up
        run: docker image prune -a -f